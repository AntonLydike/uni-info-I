#!/bin/bash

# folder
target_root=$1
# output file name is path, but replace all slashes with dashes, add md ending
output_file="${target_root/\//\-}.md"

# clear file
printf "" > $output_file

# markdown tag for code
CODE_TAG="\`\`\`\`"

# recursive function
function process_dir {
  # get target directory
  root=$1
  # get the depth, represented
  depth=$2

  # only print the folder name (in this case the assignment number)
  printname="$(basename $root))"

  # print "Assignment #" instead of "#)" for the top level heading
  if [ $depth == '#' ]; then
    printname="Assignment "
    printname+=$(basename $root)
  fi;

  printf "$depth $printname\n\n" >> $output_file

  for current in `ls -v $root`; do
    # this is required, because the folder subroutine seems to overwrite it
    root=$1
    depth=$2

    # d is the current file or folder
    d="$root/$current"

    if [ -d "$d" ]; then
      # if it's a folder, scan it
      printf "$d\n"
      process_dir $d "${depth}#"
    else
      # only print c and h files
      if [ "${d: -2}" == ".c" ] || [ "${d: -2}" == ".h" ]; then
        # if it's a file, record it's contents
        printf "$d\n"
        # get the filename without the ending
        printname=$(basename $d .c)

        printf "${depth}# $printname)\n\n${CODE_TAG}c\n" >> $output_file
        cat $d >> $output_file
        printf "\n$CODE_TAG\n\n" >> $output_file
        printf "";
      fi;
    fi;
  done;
}

if [[ $target_root =~ \.md$ ]]; then
  # if a markdown file is specified, just convert it

  echo "converting markdown file $target_root";

  output_file="$target_root";

else
  # otherwise create a new one
  process_dir $target_root "#"

fi;

if command -v grip > /dev/null; then
  echo "grip detected"

  html_output_file="$(basename $output_file .md).html"
  grip $output_file --export $html_output_file

  # append code to make page printer-friendly
  cat printify.html >> $html_output_file

  filepath="file://$(realpath $html_output_file)";

  if command -v chromium-browser > /dev/null; then
    chromium-browser --headless --print-to-pdf="$(basename $output_file .md).pdf" $filepath
  elif command -v google-chrome > /dev/null; then
    google-chrome --headless --print-to-pdf="$(basename $output_file .md).pdf" $filepath
  else;
    echo "Sadly neither chrome nor chromium are presesent, so there is no easy way to convert the html to pdf."
  fi;

  # rm $output_file;
else
  echo "grip not found! - please install grip!"
fi;

# possible further: inject some js into page to printify it (make page-breaks not break code, etc...)

# script:
# (() => {
#
#   let container  = document.querySelectorAll('article')[0],
#       children   = Array.from(container.children),
#       length     = container.childElementCount,
#       elemBuffer = [];
#
#   for (let i = 1; i < length; i++) {
#     let prev = children[i - 1],
#         curr = children[i];
#
#     if (curr.tagName.indexOf("H") !== 0) {
#       if (prev.tagName.indexOf("H") == 0) {
#         elemBuffer.push(prev);
#       }
#
#       elemBuffer.push(curr);
#
#     } else {
#       if (elemBuffer.length > 0) {
#         let wrapper = document.createElement("div");
#
#         wrapper.classList.add('no-line-breaks');
#
#         elemBuffer.forEach((elm) => {
#           wrapper.appendChild(elm);
#         })
#
#         container.insertBefore(wrapper, curr);
#
#         elemBuffer = [];
#       }
#     }
#   }
#
#   if (elemBuffer.length > 0) {
#     let wrapper = document.createElement("div");
#
#     wrapper.classList.add('no-line-breaks');
#
#     elemBuffer.forEach((elm) => {
#       wrapper.appendChild(elm);
#     })
#
#     container.appendChild(wrapper);
#   }
#
#   let styleNode = document.createElement("style");
#   styleNode.innerHTML = `#readme > h3 {
#   display: none;
# }
#
# article#grip-content {
#   border: none;
# }
#
# div#preview-page {
#   margin: 0;
# }
#
# .no-line-breaks {
#   page-break-inside: avoid;
#
# }
#
# footer {
#   font-size: 16px;
#   color: rgba(0,0,0,0.78);
# }
#
# @media print {
#   footer {
#     position: fixed;
#     bottom: 0;
#     left: 67.5px;
#     right: 67.5px;
#   }
#
#   .content-block, p {
#     page-break-inside: avoid;
#   }
#
#   html, body {
#     width: 210mm;
#     height: 297mm;
#   }
# }
# .align-right {
#   float: right;
# }
# `;
#   document.body.appendChild(styleNode);
#
#
#   let footer = document.createElement("footer");
#   footer.innerText="Benjamin Ritter, Marina Huber und Anton Lydike";
#
#   footer.innerHTML += `<span class="align-right">${document.querySelector("h1").innerText}</span>`;
#   container.appendChild(footer);
# })()

# convert to pdf with chrome (https://superuser.com/questions/592974/how-to-print-to-save-as-pdf-from-a-command-line-with-chrome-or-chromium)
# or wkhtmltopdf

# to wkhtmltopdf:
# unusable because the js isn't executed before printing...
